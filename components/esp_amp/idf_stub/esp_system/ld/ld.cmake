# Get properties needed for preprocessing
idf_build_get_property(sdkconfig_header SDKCONFIG_HEADER)
idf_build_get_property(idf_path IDF_PATH)
idf_build_get_property(target IDF_TARGET)
get_filename_component(sdkconfig_dir ${sdkconfig_header} DIRECTORY)
file(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/ld")

# Collect all necessary include directories (without the -I flag)
set(LINKER_INCLUDE_DIRS)
list(APPEND LINKER_INCLUDE_DIRS "${sdkconfig_dir}")
list(APPEND LINKER_INCLUDE_DIRS "${idf_path}/components/esp_system/ld")
list(APPEND LINKER_INCLUDE_DIRS "${idf_path}/components/esp_common/include")
list(
    APPEND LINKER_INCLUDE_DIRS
    "${ESP_AMP_PATH}/components/esp_amp/priv_include"
)

# Serialize the list of directories into a single string
# to pass to the generator
list(JOIN LINKER_INCLUDE_DIRS ";" LINKER_INCLUDE_DIRS_STR)

# Create a generator script that is more intelligent.
# It will receive the list of directories and build the -I flags itself.
set(
    linker_script_generator
    "${CMAKE_CURRENT_BINARY_DIR}/ld/linker_script_generator.cmake"
)
file(WRITE ${linker_script_generator}
[=[
# This script is generated by CMakeLists.txt.
# It receives a list of include directories and runs the C preprocessor.

# Build the list of preprocessor arguments
set(PREPROCESSOR_ARGS "-D__ASSEMBLER__" "-P" "-x" "c" "-E")
foreach(dir ${LINKER_INCLUDE_DIRS})
    list(APPEND PREPROCESSOR_ARGS "-I" "${dir}")
endforeach()

# Also add the directory of the linker script template itself to the include
list(APPEND PREPROCESSOR_ARGS "-I" "${LD_IN_DIR}")

execute_process(COMMAND "${CC}" ${PREPROCESSOR_ARGS} "${SOURCE}"
                RESULT_VARIABLE RET_CODE
                OUTPUT_VARIABLE PREPROCESSED_LINKER_SCRIPT
                ERROR_VARIABLE ERROR_VAR)

if(NOT RET_CODE EQUAL 0)
    message(
        FATAL_ERROR
        "Failed to generate ${TARGET} from ${SOURCE}\n\nError:\n${ERROR_VAR}"
    )
endif()

string(REPLACE "\\n" "\n" TEXT "${PREPROCESSED_LINKER_SCRIPT}")
file(WRITE "${TARGET}" "${TEXT}")
]=])

# Define a reusable function to handle the preprocessing.
function(preprocess_linker_file script_in_path name_out out_path)
    set(script_out "${CMAKE_CURRENT_BINARY_DIR}/ld/${name_out}")
    set(${out_path} ${script_out} PARENT_SCOPE)

    get_filename_component(ld_script_in_dir "${script_in_path}" DIRECTORY)

    add_custom_command(
            OUTPUT ${script_out}
            COMMAND ${CMAKE_COMMAND}
                "-DCC=${CMAKE_C_COMPILER}"
                "-DSOURCE=${script_in_path}"
                "-DTARGET=${script_out}"
                "-DLD_IN_DIR=${ld_script_in_dir}"
                "-DLINKER_INCLUDE_DIRS=${LINKER_INCLUDE_DIRS_STR}"
                -P "${linker_script_generator}"
            MAIN_DEPENDENCY ${script_in_path}
            DEPENDS ${sdkconfig_header}
            COMMENT "Generating ${name_out} for ${COMPONENT_NAME}..."
            VERBATIM)

    add_custom_target(
        "ldgen_${COMPONENT_NAME}_${name_out}"
        DEPENDS "${script_out}"
    )
    add_dependencies(${COMPONENT_LIB} "ldgen_${COMPONENT_NAME}_${name_out}")
endfunction()

preprocess_linker_file(
    "${ESP_AMP_PATH}/components/esp_amp/idf_stub\
/esp_system/ld/${target}/memory.ld.in"
    "memory.ld"
    memory_ld_script
)
target_linker_script(${COMPONENT_LIB} INTERFACE "${memory_ld_script}")

preprocess_linker_file(
    "${ESP_AMP_PATH}/components/esp_amp/idf_stub\
/esp_system/ld/${target}/sections.ld.in"
    "sections.ld.in"
    ld_out_path
)
target_linker_script(
    ${COMPONENT_LIB} INTERFACE "${ld_out_path}"
    PROCESS "${CMAKE_CURRENT_BINARY_DIR}/ld/sections.ld"
)

# To avoid "Manually-specified variables were not used" warnings
set(bypassWarning "${CONFIG_ESP_ROM_HAS_LP_ROM}")
set(bypassWarning "${SUBCORE_APP_NAME}")

